% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/max_clique_SA.R
\name{max_clique_SA}
\alias{max_clique_SA}
\title{Simulated annealing max-clique findre}
\usage{
max_clique_SA(g, Seqs, rc_scores, seq_scores, time.limit = 1,
  nreps = 10)
}
\arguments{
\item{g}{\code{\link{igraph}} object}

\item{Seqs}{sequences from \code{\link{rc_seqs}}}

\item{rc_scores}{scores of \code{rc_index} from \code{\link{makeRCtable}}, with names equal to \code{rc_index} values found in \code{Seqs}}

\item{seq_scores}{named vector of positive scores. Names must contain all the vertices in \code{g} and match the names of \code{Seqs}}

\item{time.limit}{time limit, in seconds, for while-loop simultaed annealing}

\item{nreps}{number of Metropolis-Hastings replicates of randomly drawn cliques to use for initalization}
}
\description{
Simulated annealing max-clique findre
}
\examples{
set.seed(1)
n=60
g <- igraph::random.graph.game(n,0.8)
verts <- paste('v_',1:n,sep='')
igraph::vertex_attr(g)$name <- verts
pscores <- rep(1,length(verts))
names(pscores) <- verts

clqs.SA <- max_clique_SA(g,pscores,time.limit=3,nreps=20) 
##time.limit lets us find reasonably large cliques within time.limit

clqs.IG <- igraph::max_cliques(g)  
##this is a good function, but scales poorly with large graphs

lns <- sapply(clqs.IG,length)
sort(names(clqs.IG[[which.max(lns)]]))
sort(clqs.SA$clique)  
## finds reasonably large cliques, quickly, w/ bonus of weights
## for dendromap, rc-seq cliques will share common root node, so finding quick
## cliques will find the same cophylogenetic lineages as brute-force max_cliques
}
